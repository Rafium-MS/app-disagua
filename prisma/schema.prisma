generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Partner {
  id          Int       @id @default(autoincrement())
  name        String
  document    String    @unique
  taxId       String?
  distributor String?
  phone       String?
  email       String?   @unique
  city        String?
  state       String?
  paymentDay  Int?
  bankName    String?
  bankBranch  String?
  bankAccount String?
  pixKey      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reports     Report[]
  vouchers    Voucher[]
  stores      Store[]
  brands      Brand[]
}

enum ProductType {
  GALAO_20L
  GALAO_10L
  PET_1500ML
  CAIXA_COPO
  VASILHAME
}

model Brand {
  id        String   @id @default(cuid())
  partnerId Int
  partner   Partner  @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  name      String
  code      String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stores Store[]

  @@unique([partnerId, name])
}

enum StoreStatus {
  ACTIVE
  INACTIVE
}

model Report {
  id        Int       @id @default(autoincrement())
  partnerId Int
  title     String
  issuedAt  DateTime  @default(now())
  summary   String?
  partner   Partner   @relation(fields: [partnerId], references: [id])
  vouchers  Voucher[]

  @@unique([partnerId, title])
  @@index([partnerId])
}

model Voucher {
  id         Int       @id @default(autoincrement())
  code       String    @unique
  partnerId  Int
  reportId   Int?
  storeId    String?
  product    String?
  quantity   Int?
  issuedAt   DateTime  @default(now())
  redeemedAt DateTime?
  filePath   String?
  partner    Partner   @relation(fields: [partnerId], references: [id])
  report     Report?   @relation(fields: [reportId], references: [id])
  store      Store?    @relation(fields: [storeId], references: [id])

  @@index([partnerId])
  @@index([reportId])
  @@index([storeId])
}

model AuditLog {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  action        String
  entity        String
  entityId      String?
  actor         String?
  requestId     String?
  requestMethod String?
  requestUrl    String?
  ipAddress     String?
  changes       String?
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  passwordHash  String
  status        String         @default("ACTIVE")
  failedLogins  Int            @default(0)
  lastLoginAt   DateTime?
  lastLoginIp   String?
  roles         UserRole[]
  refreshTokens RefreshToken[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Role {
  id    String    @id @default(cuid())
  name  String    @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?
  userAgent String?
  ip        String?

  @@index([userId])
  @@unique([tokenHash])
}

model Store {
  id             String      @id @default(cuid())
  partnerId      Int
  partner        Partner     @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  brandId        String
  brand          Brand       @relation(fields: [brandId], references: [id], onDelete: Cascade)
  name           String
  normalizedName String
  deliveryPlace  String
  addressRaw     String?
  street         String?
  number         String?
  complement     String?
  district       String?
  city           String?
  state          String?
  postalCode     String?
  mall           String?
  cnpj           String?     @unique
  phone          String?
  email          String?
  status         String      @default("ACTIVE")
  prices         StorePrice[]
  vouchers       Voucher[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([partnerId, brandId])
  @@unique([brandId, normalizedName, city, mall])
}

model StorePrice {
  id        String   @id @default(cuid())
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  product   ProductType
  unitCents Int

  @@unique([storeId, product])
}
